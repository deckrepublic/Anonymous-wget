#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <net/if.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <time.h>       /* time */
#include "awget.h"

//function to serialize the main struct Chain
void serializeChain(Chain *item, char *buffer)
{
    int seeker = 0;  // integer to keep record of the wrinting position in 'buffer' 

    memcpy(&buffer[seeker], &item->urlLen, sizeof(item->urlLen));
    seeker += sizeof(item->urlLen); // move seeker ahead by a byte 

    // copy characters from character array to the buffer (URL address)
    memcpy(&buffer[seeker], item->url, item->urlLen);
    seeker += item->urlLen; // ... and move the seeker ahead by the amount of	
    			      //   characters in the array. 
    //copy the number of servers into the buffer
    memcpy(&buffer[seeker], &item->num_ss, sizeof(item->num_ss));
    seeker += sizeof(item->num_ss); // ... and move the seeker ahead by the amount of
    			      //   characters in the array.

    list *ptr = newList();
    ptr = item->content;
    while(ptr->next != NULL) /* copy contents of the linked list in buffer as long there
      		      are items in the list. In this example, loop is
      		      done three times.  */
      {

        memcpy(&buffer[seeker], &ptr->addressLen, sizeof(ptr->addressLen));
        seeker += sizeof(ptr->addressLen); // move seeker ahead by a byte

        // copy characters from character array to the buffer (IP address)
        memcpy(&buffer[seeker], ptr->IP_address, ptr->addressLen);
        seeker += ptr->addressLen; // ... and move the seeker ahead by the amount of
        			      //   characters in the array.
        //copy the port number into the buffer
        memcpy(&buffer[seeker], &ptr->portLen, sizeof(ptr->portLen));
        seeker += sizeof(ptr->portLen); // ... and move the seeker ahead by the amount of
        			      //   characters in the array.
        memcpy(&buffer[seeker], ptr->port, sizeof(ptr->port));
        seeker += ptr->portLen; // ... and move the seeker ahead by the amount of


        ptr = ptr->next; // move on to the next item (or node) in the list
      }

}

int listSize(list *item)
{
  int size = 0;
  
  while (item->next != NULL) {
    size += item->addressLen;         /* add addressLen bytes to 'size' */
    size += sizeof(item->addressLen); /* add 4 bytes to 'size' */
    size += sizeof(item->port);       /* add port len bytes to 'size'   */
    item = item->next;              /* ... and to the batmobil! */
  }
  return size;
}
int chainSize(Chain *item)
{
  int size = listSize((item->content));
  
    size += item->urlLen;         /* add addressLen bytes to 'size' */
    size += sizeof(item->urlLen); /* add 4 bytes to 'size' */
    size += sizeof(item->num_ss);       /* add port len bytes to 'size'   */

  return size;
}
//reader
int main(int argc, char *argv[])
{
//setup URL and chainfile and beginnings of the struct
    char *url;
    char *chainfile;
    FILE *cfile_in;
    int number_ss = 0;
    list *first = newList();
    
// check to see how many arguments
    if (argc == 1)
    {
        fputs("Need at least a URL argument for awget!\n",stderr);
        exit(1);
    }
    if (argc == 2)
    {
        url = argv[1];
        chainfile = "chaingang.txt";
    }
    if (argc == 3)
    {
        url = argv[1];
        chainfile = argv[2];;
    }
//try to open chainfile
    cfile_in = fopen(chainfile, "r");
//if no file exist print error and exit
    if (cfile_in==NULL)
    {
        fputs("No chain file available!\n", stderr);
        exit(1);
    }
//proceed to set up values
    fscanf(cfile_in,"%d", &number_ss);
//read in file store ipaddresses and ports
    const char *ipaddresses[number_ss];
    const char *ports[number_ss];
    int count = 0;
    //portion memory for an array of strings
    while(count < number_ss)
    {
        ipaddresses[count] = malloc(20 *sizeof(char));
        ports[count] = malloc(20 *sizeof(char));
        count++;
    }
    count = 0;
    while ( count < number_ss)
        {
        	fscanf(cfile_in,"%s %s",ipaddresses[count], ports[count]);
        	count++;
        }
    fclose(cfile_in);
    count = 0;
    list *ptr = newList();

    //set random address to connect to
    srand (time(NULL));
    int picked_ss = (rand()%number_ss);

    //now read in values and set up the structs
    int picked_ss_flag = picked_ss;
    while ( count < number_ss)
    {
    	//fscanf(cfile_in,"%s %d",ipaddresses[count], &ports[count]);
        if(count == picked_ss_flag)
    	{
    		count++; //ignore picked server to pass on to ss this will reduce the list
    	}
    	else if(picked_ss_flag == 0)
    	{
    		first->addressLen = strlen(ipaddresses[count]);
    		  //char *cpy;
    		first->IP_address = ipaddresses[count];
    		    		//sprintf(cpy, "%d",);
    		first->portLen = strlen(ports[count]);
    		first->port = ports[count];
    		first->next = newList();
    		ptr = first->next;
    		count++;
    		picked_ss_flag = number_ss + 1;
    	}
    	else if(count == 0)
    	 {
    	    		first->addressLen = strlen(ipaddresses[count]);
    	    		  //char *cpy;
    	    		first->IP_address = ipaddresses[count];
    	    		    		//sprintf(cpy, "%d",);
    	    		first->portLen = strlen(ports[count]);
    	    		first->port = ports[count];
    	    		first->next = newList();
    	    		ptr = first->next;
    	    		count++;
    	 }
    	else
    	{
    		ptr->addressLen = strlen(ipaddresses[count]);
    		//char *cpy;
    		ptr->IP_address = ipaddresses[count];
    		//sprintf(ptr->port, "%d",ports[count]);
    		ptr->portLen = strlen(ports[count]);
    		ptr->port = ports[count];
    		ptr->next = newList();
    		ptr = ptr->next;
    		count++;
    	}
        //printf("%s %d\n",ipaddresses[count], ports[count]);

    }

    //now we can create the Chain struct!
    Chain *chaingang = newChain(url,number_ss,first);
    
    //set up socket connection
    struct hostent *he;
    int port_number;
    char *ip_address;
    int sockfd, numbytes, ret;
    //char buf[MAXDATASIZE];
    pthread_t rThread;
    
    struct sockaddr_in their_addr; // connectorâ€™s address information
    
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
    {
		perror("socket");
		exit(1);
    }


    ip_address = ipaddresses[picked_ss];
    port_number = atoi(ports[picked_ss]);
    
    struct in_addr ipv4addr;
    inet_pton(AF_INET, ip_address, &ipv4addr);
    he = gethostbyaddr(&ipv4addr, sizeof(ipv4addr), AF_INET);
	
    their_addr.sin_family = AF_INET; // host byte order
    their_addr.sin_port = htons(port_number); // short, network byte order
    //their_addr.sin_addr.s_addr = inet_addr(ip_adress);
    their_addr.sin_addr = *((struct in_addr *)he->h_addr);
    bzero(&(their_addr.sin_zero), 8); // zero the rest of the struct
    
    if (connect(sockfd, (struct sockaddr *)&their_addr,sizeof(struct sockaddr)) == -1)
    {
		perror("connect");
		exit(1);
    }
    //serialize the chain
    int chainLength = chainSize(chaingang);
    char *buffer = (char *)malloc(chainLength);


    serializeChain(chaingang,buffer);

    while(1)
    {
    	printf(stdout,"%s","hello");
    }
    close(sockfd);

}
